1.创建ssh  在 git bash
  ssh-keygen -t rsa -f /c/User/GT/.ssh/id_rsa_ec  -C "username"
  
#注： 
#-t  表示加密类型 rsa
#-f  表示文件路径
#-C  注释，，，登陆时使用的用户名？(后面没有用到)
#id_rsa_ec是私钥文件名

2.  ssh-agent ssh-add ~/.ssh/id_rsa_ec
  
#非默认id-rsa文件需要将ssh添加到ssh-agent

3.	在~/.ssh/下建立config文件，文件内容：
	#user for myself github
	Host github_gt
	HostName github.com
	User git
	IdentityFile ~/.ssh/id_rsa

	#user for ecWeb_github
	Host github_ec
	HostName github.com
	User git
	IdentityFile ~/.ssh/id_rsa_ec

	#user for github_aaa
	Host github_aaa
	HostName github.com
	User git
	IdentityFile ~/.ssh/id_rsa_aaa
	
#注：可以只有1个，也可以有多个
#Host 表示别名，用于区分和确定当前 链接 的gitHub仓库
#IdentityFile 表示ssh私钥文件，会用它与之比对

# ssh 方式 关联 github库
# ----> 后面 git remote add origin git@github_ec:276073970/ecWeb.git
# 其中的HOST就是用于git@HOST

4.	将公钥添加到gitHub后台
	可以测试 ssh链接
	eg:
	ssh -T git@github_ec
	显示结果为：Hi 276073970! You've successfully authenticated, but GitHub does not provide shell access.
	其中，276073970 是 github仓库所有者的用户名

5.	git init

# 初始化本地仓库

6.	git remote add origin git@github_ec:276073970/ecWeb.git

# 关联本地仓库与远程仓库
# 后面可以修改，在 ./.git/config文件
# 修改:	url = git@github_ec:276073970/ecWeb.git

7.  vim newfile
	git add newfile
	git commit -m "message" newfile
	git push -u origin master	#初次
	#git push 非第一次

#注:
#第一次push的时候可能需要先pull操作
#git pull origin master 
#指定remot分支 
	
附：

~/.ssh/config文件 

#user for myself github
Host github_gt
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa

#user for ecWeb_github
Host github_ec
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_ec

#user for github_aaa
Host github_aaa
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_aaa

./.git/config文件

[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
	hideDotFiles = dotGitOnly
[remote "origin"]
	url = git@github_ec:276073970/ecWeb.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master


#============================================
#=======在自己的云主机搭建git服务器==========
#============================================

服务器上：
1.安装git
  yum -y install git # centOS
  apt-get install git #ubuntu

2.创建git用户并且赋予权限
  $ adduser git
#会在/home目录下看到一个git目录

3.给git用户分配一个密码
  $ passwd git 123456(你的密码)

#这个密码用在你后面提交代码的时候使用(然而并没有用到。。。)

本机(自己的电脑)：
git-bash中
创建一个新的 ssh key,参上

服务器上:
#将ssh public key 添加到服务器

4.cd /home/git/
# git表示用户git

5.mkdir .ssh
#没有该目录就创建

6.cd .ssh

7.vim authorized_keys
# 新建文件authorized_keys

8.将public key串填入
# 如果有多个，则换行追加
# 保存退出

9.在其它目录，比如网站根目录
 我的是 /usr/share/nginx/html/,
 新建文件夹testgit测试
 
 $ cd /usr/share/nginx/html/
 $ mkdir testgit
 $ cd testgit

10.git init --bare testgit.git
#新建git仓库，一定要是空仓库，--bare参数不能省略

11.
$ cd ..
$ chmod -R 777 testgit

#修改testgit目录权限
#也可以使用chown...自由发挥吧
#如果不修改，那么push的时候会有写入错误

本机:
12.git init
#在一个空目录里面创建一个空仓库

13.git remote add origin git@211.159.184.137:/usr/share/nginx/html/testgit/testgit.git
#添加远程仓库
#其中211.159.184.137是云服务器的ip，可以在C:\Users\GT\.ssh\config里面配置
#user for my cloud server

Host git_cloud

HostName 211.159.184.137

User git

IdentityFile ~/.ssh/id_cloude_server
#这时可以用git_cloud替代211.159.184.137

14.
git add *
git commit -m "message" *
git push -u origin master
# 提交文件
# 不出意外能成功


服务器上：
15.cd /usr/share/nginx/html/testgit/
#进入创建的仓库目录
#这时用ls看不到任何效果
#但是确实已经提交了

16.cd testgit.git/hooks
# 自动同步功能用到的是 git 的钩子功能
# 这里我们创建post-receive文件

17.vim post-receive
#新建post-receive文件

#填入:
#!/bin/bash
git --work-tree=/usr/share/nginx/html/testgit checkout -f

#其中/usr/share/nginx/html/testgit 是自定义的，我放在网站里面可以直接访问

18. chmod 777 post-receive
修改文件权限，该文件应该具有可执行权限

19.再次push就可以在服务器/usr/share/nginx/html/testgit上看到提交的文件了



【参考资料】
1.http://www.tangshuang.net/1693.html

2.http://blog.csdn.net/baidu_30000217/article/details/51327289